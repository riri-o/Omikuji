window.FrameObject = {
    onGetData: function(data){},
    onLocalize: function(locales){}
}
var m_commandUrl;
var m_initialized = false;
var m_pluginName;
var m_cssLoaded = false;
var m_isRtl;
var m_actualStyle;
var m_visible = false;
var m_explicitSize = false;
function AddEventListener(element, name, func)
{
    if ("addEventListener" in element)
        element.addEventListener(name,
            function(e) 
            {
                try
                {
                    func(e || window.event);
                }
                catch (e)
                {
                    SendLog(e);
                }
            }, true);
    else
        element.attachEvent("on" + name, 
            function(e)
            {
                try
                {
                    func.call(element, e || window.event);
                }
                catch (e)
                {
                    SendLog(e);
                }
            });
};
function LocalizeElement(id, localeValue)
{
    var element = document.getElementById(id);
    if (element)
    {
        ClearAndFieldElement(element, localeValue);
    }
}
function LocalizeElementByClassName(className, localeValue)
{
    var elements = document.getElementsByClassName(className);
    for (var i = 0; i < elements.length; ++i)
    {
        ClearAndFieldElement(elements[i], localeValue);
    }
}
function ClearAndFieldElement(element, localeValue)
{
    ClearElement(element);
    element.appendChild(document.createTextNode(localeValue));
}
function ClearElement(element)
{
    while (element && element.firstChild) 
    {
        element.removeChild(element.firstChild);
    }
}
function IsDefined(variable)
{
    return "undefined" !== typeof(variable);
};
function StopProcessingEvent(evt)
{
    if (evt.preventDefault)
        evt.preventDefault();
    else
        evt.returnValue = false;
    if (evt.stopPropagation)
        evt.stopPropagation();
    if (IsDefined(evt.cancelBubble))
        evt.cancelBubble = true;
}
function Init()
{
    AddEventListener(window, "message", OnWindowMessage);
    if (document.location.search)
    {
        var cssSrc = ParseQueryString(document.location.search).cssSrc;
        if (cssSrc)
            AddCssLink(cssSrc);
    }
}
function OnWindowMessage(evt)
{
    if (!evt || !evt.data || typeof evt.data !== "string")
        return;
    var message = JSON.parse(evt.data);
    OnMessage(message);
}
function SendAjax(path, data, callback)
{
    var xhr = window.XDomainRequest ? new window.XDomainRequest : new XMLHttpRequest;
    xhr.open(data ? "POST" : "GET", path);
    xhr.onprogress = function(){};
    xhr.onerror = function(){};
    if (callback)
        xhr.onload = callback;
    if (data)
        xhr.send(data);
    else
        xhr.send();
}
function ParseQueryString(queryString)
{
    var queryString = queryString.slice(1);
    var keyValuePairs = queryString.split("&");
    var result = {};
    for (var i = 0; i < keyValuePairs.length; ++i)
    {
        var parsedPair = keyValuePairs[i].split("=");
        result[parsedPair[0]] = decodeURIComponent(parsedPair[1]);
    }
    return result;
}
function AddCssLink(href)
{
    var link = document.createElement("link");
    link.type = "text/css";
    link.rel = "stylesheet";
    link.href = href;
    AddEventListener(window, "load", OnLoadHandler);
    AddEventListener(link, "error", function(){OnErrorHandler(href);});
    if (document.head)
        document.head.appendChild(link);
    else
        document.getElementsByTagName("head")[0].appendChild(link);
}
function OnErrorHandler(cssHref)
{
    SendAjax(cssHref, null, OnCssAjax);
}
function OnCssAjax(evt)
{
    InsertCssInline(evt.target.responseText);
}
function OnLoadHandler()
{
    m_cssLoaded = true;
    if (m_initialized)
        ResizeBody(true);
}
function InsertCssInline(cssData)
{
    var style = document.createElement("style");
    style.type = "text/css";
    style.innerHTML = cssData;
    document.head.appendChild(style);
    setTimeout(OnLoadHandler, 0);
}
function ResizeBody(needSendNewSize)
{
    if (m_explicitSize)
    {
        delete document.body.style.width;
        delete document.body.style.height;
        return;
    }
    document.body.style.width = "1px";
    document.body.style.height = "1px";
    var sizeData = {
        height: document.body.scrollHeight,
        width: document.body.scrollWidth
    };
    if (!sizeData.width || !sizeData.height)
    {
        setTimeout(function () {
            sizeData = {
                height: document.body.scrollHeight,
                width: document.body.scrollWidth
            };
            SendSize(sizeData, needSendNewSize);
        }, 50);
    }
    else
    {
        SendSize(sizeData, needSendNewSize);
    }
}
function SendSize(sizeData, needSendNewSize)
{
    document.body.style.width = sizeData.width + "px";
    document.body.style.height = sizeData.height + "px";
    if (needSendNewSize)
    {
        sizeData.style = m_actualStyle;
        SendCommand("size", sizeData);
    }
}
function SendClose(action)
{
    if (!m_visible)
    {
        return;
    }
    var closeData = {
        closeAction: action
    };
    SendCommand("close", closeData);
    m_visible = false;
}
function SendData(data)
{
    SendCommand("data", data);
}
function OnInit(message)
{
    m_initialized = true;
    m_commandUrl = message.commandUrl;
    if (message.cssSrc)
        AddCssLink(message.cssSrc);
    m_pluginName = message.pluginName;
    m_isRtl = message.isRtl;
    m_visible = true;
    SetStyle(message.style);
    if (message.locales)
        window.FrameObject.onLocalize(message.locales);
    if (message.data)
        window.FrameObject.onGetData(message.data);
    if (message.explicitSize)
        m_explicitSize = true;
    if (message.cssData)
        InsertCssInline(message.cssData);
    if (m_cssLoaded)
        ResizeBody(message.needSize);
}
function OnUpdate(message)
{
    m_visible = true;
    SetStyle(message.style);
    if (message.data)
        window.FrameObject.onGetData(message.data);
    if (m_cssLoaded)
        ResizeBody(message.needSize);
}
function SetStyle(style)
{
    m_actualStyle = style ? style.toString() : "";
    document.body.className = m_actualStyle;
    if (m_isRtl)
        document.body.className += " rtl";
}
function OnMessage(message)
{
    if (message.command === "init")
        OnInit(message);
    else if (message.command === "update")
        OnUpdate(message);
}
function SendCommand(commandType, commandData)
{
    if (!m_initialized)
        return;
    if (!m_visible)
        return; 
    var frameData = {
        pluginName: m_pluginName,
        message: JSON.stringify({type: commandType, data: commandData})
    };
    var command = {
        method: "frameData",
        parameters: JSON.stringify(frameData),
        result: 0
    };
    SendAjax(m_commandUrl + "/to/frameData", JSON.stringify(command));
}
function SendLog(error)
{
    if (!m_initialized)
        return;
    var msg = "" + (error.message || error);
    if (error.stack)
        msg += "\r\n" + error.stack;
    if (msg && msg.length > 2048) 
        msg = msg.substring(0, 2048) + '<...>';
    SendAjax(m_commandUrl + "/log?" + encodeURIComponent(msg));
}
Init();
